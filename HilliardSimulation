<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js canvas - particles - waves</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}

			a {
				color:#0078ff;
			}
		</style>
	</head>
	<body>
		<script src="../build/three.js"></script>
		<script src="numeric-1.2.6.js"></script>
		<script src="js/renderers/Projector.js"></script>
		<script src="js/renderers/CanvasRenderer.js"></script>

		<script src="js/libs/stats.min.js"></script>

		<script>


function createArray(length) {
    var arr = new Array(length || 0),
        i = length;

    if (arguments.length > 1) {
        var args = Array.prototype.slice.call(arguments, 1);
        while(i--) arr[length-1 - i] = createArray.apply(this, args);
    }

    return arr;
}

		//Numerical parameters
var nx = 50; // # gridpoints in x-direction
var nz= 50; // # gridpoints in z-direction
var nt = 10000; // Number of timesteps to compute
var dx = 1; // Spacing of grid in x-direction
var dz = 1; // Spacing of grid in z-direction

//Constants of the model
var M = 3;
var r = -1;
var w = 1;  
var u = 1;

//compute stable timestep
var dt = 0.01;

//initial conditions
var T = createArray(50, 50)

T[1, 50]=0
T[1, 1]=0
T[50, 1]=0
T[50, 50]=0
for (j=2; j<nx; j++){
	for (i=2; i<nz; i++){
		T[i,j] = (Math.floor(Math.random()*2)+0)*2-1;
		
	}
}
var sx = M*dt/dx^2;
var sz = M*dt/dz^2;
var ssx = M*dt/dx^4;
var ssz = M*dt/dz^4;

function physics(){
	//Non-conservative
	for (j=2; j<=nx-1; j++){
		for (i=2; i<=nz-1; i++){
			//T[i,j] = T[i,j] + sx*(T[i,j+1] - 2*T[i,j] + T[i,j-1]) + sz*(T[i+1,j] - 2*T[i,j] + T[i-1,j]) - M*dt*(r*T[i,j] + (u/6)*Math.pow(T[i,j],3));
			//console.log(T[i,j] + sx*(T[i,j+1] - 2*T[i,j] + T[i,j-1]) + sz*(T[i+1,j] - 2*T[i,j] + T[i-1,j]) - M*dt*(r*T[i,j] + (u/6)*Math.pow(T[i,j],3)));
		console.log(i)
		console.log(j)
		}
	}
}
physics();
//console.log(T)
			var SEPARATION = 100, AMOUNTX = 50, AMOUNTY = 50;

			var container, stats;
			var camera, scene, renderer;

			var particles, particle, count = 0;

			var mouseX = 0, mouseY = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
				camera.position.z = 1000;

				scene = new THREE.Scene();

				particles = new Array();

				var PI2 = Math.PI * 2;


				var i = 0;

				for ( var ix = 0; ix < AMOUNTX; ix ++ ) {

					for ( var iy = 0; iy < AMOUNTY; iy ++ ) {
						var material = new THREE.SpriteCanvasMaterial( {color: Math.random()*0xffffff,
					program: function ( context ) {

						context.beginPath();
						context.arc( 0, 0, 0.5, 0, PI2, true );
						context.fill();

					}

				} );

						particle = particles[ i ++ ] = new THREE.Sprite( material );
						particle.position.x = ix * SEPARATION - ( ( AMOUNTX * SEPARATION ) / 2 );
						particle.position.z = iy * SEPARATION - ( ( AMOUNTY * SEPARATION ) / 2 );
						scene.add( particle );

					}

				}

				renderer = new THREE.CanvasRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );

				stats = new Stats();
				container.appendChild( stats.dom );

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function onDocumentMouseMove( event ) {

				mouseX = event.clientX - windowHalfX;
				mouseY = event.clientY - windowHalfY;

			}

			function onDocumentTouchStart( event ) {

				if ( event.touches.length === 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length === 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				camera.position.x += ( mouseX - camera.position.x ) * .05;
				camera.position.y += ( - mouseY - camera.position.y ) * .05;
				camera.lookAt( scene.position );

				var i = 0;

				for ( var ix = 0; ix < AMOUNTX; ix ++ ) {

					for ( var iy = 0; iy < AMOUNTY; iy ++ ) {

						particle = particles[ i++ ];
						particle.position.y = Math.random()*10;
						particle.scale.x = particle.scale.y = Math.random()*50;

					}

				}

				renderer.render( scene, camera );

				count += 0.1;

			}

		</script>
	</body>
</html>
